// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webthitn_backend.Models;

#nullable disable

namespace webthitn_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250412111201_AddGradesToSubjects")]
    partial class AddGradesToSubjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webthitn_backend.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("webthitn_backend.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialGrading")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoGradeShortAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<decimal?>("PassScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ScoringConfig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowResult")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnsweredQuestions")
                        .HasColumnType("int");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GradedById")
                        .HasColumnType("int");

                    b.Property<int>("GradingStatus")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmittedManually")
                        .HasColumnType("bit");

                    b.Property<int>("PartiallyCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int>("PendingManualGradeCount")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentageScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("QuestionTypeStatistics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("GradedById");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ExamTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bài kiểm tra nhanh 15 phút",
                            Name = "Kiểm tra 15 phút"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bài kiểm tra 45 phút",
                            Name = "Kiểm tra 1 tiết"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bài thi giữa học kỳ",
                            Name = "Giữa kỳ"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Bài thi cuối học kỳ",
                            Name = "Cuối kỳ"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Đề thi thử THPT Quốc gia",
                            Name = "Thi thử THPT QG"
                        });
                });

            modelBuilder.Entity("webthitn_backend.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("webthitn_backend.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("DefaultScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionLevelId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("ScoringConfig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortAnswerConfig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestedTime")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LessonId");

                    b.HasIndex("QuestionLevelId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("webthitn_backend.Models.QuestionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QuestionLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Câu hỏi mức độ nhận biết",
                            Name = "Nhận biết",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Câu hỏi mức độ thông hiểu",
                            Name = "Thông hiểu",
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Câu hỏi mức độ vận dụng thấp",
                            Name = "Vận dụng thấp",
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Câu hỏi mức độ vận dụng cao",
                            Name = "Vận dụng cao",
                            Value = 4
                        });
                });

            modelBuilder.Entity("webthitn_backend.Models.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfTrueFalseGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ScorePercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("webthitn_backend.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("webthitn_backend.Models.StudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ExamResultId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyCorrect")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ManualScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresManualReview")
                        .HasColumnType("bit");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<string>("ShortAnswerEvaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TeacherNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrueFalseAnswers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrueFalseCorrectCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamQuestionId");

                    b.HasIndex("ExamResultId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("webthitn_backend.Models.StudentAnswerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrueFalseAnswers")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentAnswerId");

                    b.ToTable("StudentAnswerHistory");
                });

            modelBuilder.Entity("webthitn_backend.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Grades")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "MATH",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Toán",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Toán"
                        },
                        new
                        {
                            Id = 2,
                            Code = "PHY",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Vật Lý",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Vật Lý"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CHEM",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Hóa Học",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Hóa Học"
                        },
                        new
                        {
                            Id = 4,
                            Code = "BIO",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Sinh Học",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Sinh Học"
                        },
                        new
                        {
                            Id = 5,
                            Code = "LIT",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Ngữ Văn",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Ngữ Văn"
                        },
                        new
                        {
                            Id = 6,
                            Code = "ENG",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Tiếng Anh",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Tiếng Anh"
                        },
                        new
                        {
                            Id = 7,
                            Code = "HIST",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Lịch Sử",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Lịch Sử"
                        },
                        new
                        {
                            Id = 8,
                            Code = "GEO",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Môn Địa Lý",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "Địa Lý"
                        },
                        new
                        {
                            Id = 9,
                            Code = "GDKT&PL",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giáo dục kinh tế và pháp luật",
                            Grades = "10,11,12",
                            IsActive = true,
                            Name = "GDKT&PL"
                        });
                });

            modelBuilder.Entity("webthitn_backend.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResetPasswordExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FullName = "Administrator",
                            Grade = "N/A",
                            IsActive = true,
                            Password = "$2a$11$1ibBiPptKFT/BXBynYoexO/nLsXnyEa/DNgnV/zvLHKKlseVTwyeS",
                            PhoneNumber = "N/A",
                            Role = "Admin",
                            School = "N/A",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Email = "thien1124@example.com",
                            FullName = "Thien Nguyen",
                            Grade = "Teacher",
                            IsActive = true,
                            LastLogin = new DateTime(2025, 4, 1, 15, 56, 40, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$I9MGhO638G8uHtvUz9EXCu7dxdGw1Orotw.KbIu3UW4oNH7eGBe8W",
                            PhoneNumber = "0123456789",
                            Role = "Teacher",
                            School = "Trường THPT Chu Văn An",
                            Username = "Thien1124"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 1, 15, 56, 0, 0, DateTimeKind.Unspecified),
                            Email = "student1@example.com",
                            FullName = "Học sinh mẫu",
                            Grade = "12",
                            IsActive = true,
                            Password = "$2a$11$1d6uW0yoqof1WmyKZHP6Tu5zevpvatryzWM5fC7V4gHYElY/j9xSu",
                            PhoneNumber = "0987654321",
                            Role = "Student",
                            School = "Trường THPT Chu Văn An",
                            Username = "student1"
                        });
                });

            modelBuilder.Entity("webthitn_backend.Models.Chapter", b =>
                {
                    b.HasOne("webthitn_backend.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("webthitn_backend.Models.Exam", b =>
                {
                    b.HasOne("webthitn_backend.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Users.User", null)
                        .WithMany("CreatedExams")
                        .HasForeignKey("UserId");

                    b.Navigation("Creator");

                    b.Navigation("ExamType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamQuestion", b =>
                {
                    b.HasOne("webthitn_backend.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamResult", b =>
                {
                    b.HasOne("webthitn_backend.Models.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Users.User", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedById");

                    b.HasOne("webthitn_backend.Models.Users.User", "Student")
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("webthitn_backend.Models.Lesson", b =>
                {
                    b.HasOne("webthitn_backend.Models.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("webthitn_backend.Models.Question", b =>
                {
                    b.HasOne("webthitn_backend.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.HasOne("webthitn_backend.Models.Users.User", "Creator")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Lesson", null)
                        .WithMany("Questions")
                        .HasForeignKey("LessonId");

                    b.HasOne("webthitn_backend.Models.QuestionLevel", "Level")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Creator");

                    b.Navigation("Level");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("webthitn_backend.Models.QuestionOption", b =>
                {
                    b.HasOne("webthitn_backend.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("webthitn_backend.Models.StudentAnswer", b =>
                {
                    b.HasOne("webthitn_backend.Models.ExamQuestion", "ExamQuestion")
                        .WithMany()
                        .HasForeignKey("ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.ExamResult", "ExamResult")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("ExamResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webthitn_backend.Models.QuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId");

                    b.Navigation("ExamQuestion");

                    b.Navigation("ExamResult");

                    b.Navigation("Question");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("webthitn_backend.Models.StudentAnswerHistory", b =>
                {
                    b.HasOne("webthitn_backend.Models.StudentAnswer", "StudentAnswer")
                        .WithMany("AnswerHistory")
                        .HasForeignKey("StudentAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentAnswer");
                });

            modelBuilder.Entity("webthitn_backend.Models.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("webthitn_backend.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamResult", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("webthitn_backend.Models.ExamType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("webthitn_backend.Models.Lesson", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("webthitn_backend.Models.Question", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("webthitn_backend.Models.QuestionLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("webthitn_backend.Models.StudentAnswer", b =>
                {
                    b.Navigation("AnswerHistory");
                });

            modelBuilder.Entity("webthitn_backend.Models.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("webthitn_backend.Models.Users.User", b =>
                {
                    b.Navigation("CreatedExams");

                    b.Navigation("CreatedQuestions");

                    b.Navigation("ExamResults");
                });
#pragma warning restore 612, 618
        }
    }
}
